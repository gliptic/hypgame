use state
use render

pub var draw
pub var paused

fn get_cell_name(cell) {
    if cell == state.CELL_FLOOR {
        return "FLOOR"
    } else if cell == state.CELL_BLOCK {
        return "BLOCK"
    } else if state.is_teleport(cell) {
        let id = (cell - state.CELL_TELEPORT0)
        return "TELEPORT " + (id >> 1) + if id & 1 { " REV" } else { "" }
    } else if state.is_switch(cell) {
        let id = (cell - state.CELL_SWITCH0)
        return "SWITCH " + id
    } else if state.is_door(cell) {
        let id = (cell - state.CELL_DOOR0)
        return "DOOR " + id
    } else if cell == state.CELL_WINDOW {
        return "WINDOW"
    }
    return "" + cell
}

pub fn start(world) {
    let cursor = [0, 0]
    var cursor_dir = true, menu = false
    paused := false

    var editor_selected_cell = state.CELL_BLOCK,
        last_selected_teleport = state.CELL_TELEPORT0,
        last_selected_switch = state.CELL_SWITCH0,
        last_selected_door = state.CELL_DOOR0

    fn to_json(st) {
        return JSON.stringify(new {
            version: 1,
            map: world.first_state.map,
            options: world.first_state.options,
        })
    }

    fn to_binary(st) {
        var arr = new Uint8Array(world.first_state.map);
        # TODO: Add options
        return arr
    }

    fn from_json(json, st) {
        let map = JSON.parse(json)
        if map && map.map && map.options {
            # TODO: Upgrade map to latest version
            st.map := map.map
            st.options := map.options
        }
    }
    
    fn load_map() {
        let data = window.localStorage.getItem("hyp__map")
        if data {
            from_json(data, world.first_state)
        }
    }

    load_map()
    state.world_reset(world)

    fn save_map() {
        let data = to_json(world.first_state)
        window.localStorage.setItem("hyp__map", data)
        @debug console.log("saved", data)
    }

    var last_filename = "map.txt"

    fn save_blob_to_disk(blob, filename) {
        var a = document.createElement("a")
        a.download := filename
        a.rel := "noopener"
        a.href := URL.createObjectURL(blob)
        setTimeout({ URL.revokeObjectURL(a.href) }, 40000)
        setTimeout({
            a.dispatchEvent(new MouseEvent("click"))
            @debug console.log("clicked")
        }, 0)
    }

    fn save_map_to_disk() {
        let data = to_json(world.first_state)

        save_blob_to_disk(new File([data], last_filename), last_filename)
    }

    fn save_binary_map_to_disk() {
        let data = to_binary(world.first_state)

        console.log(data)
        save_blob_to_disk(new File([data], last_filename), last_filename)
    }

    fn reset_world() {
        save_map()
        state.world_reset(world)
        paused := false
    }

    fn empty_world() {
        world.first_state := state.state_create()
        state.world_reset(world)
        paused := true
    }

    fn load_map_from_disk(text) {
        from_json(text, world.first_state)
        reset_world()
    }
    
    let drop_div = document.getElementById("d")
    drop_div.ondrop := { |ev|
        @debug console.log("drop", ev)

        if (ev.dataTransfer.items) {
            # Use DataTransferItemList interface to access the file(s)
            #console.log("DataTransferItemList")
            for i in 0..(ev.dataTransfer.items.length) {
                # If dropped items aren't files, reject them
                if (ev.dataTransfer.items[i].kind === "file") {
                    let file = ev.dataTransfer.items[i].getAsFile()
                    last_filename := file.name
                    #console.log("... file[" + i + "].name = " + file.name)
                    let reader = new FileReader()
                    reader.onload := { |rev|
                        load_map_from_disk(rev.target.result)
                    }
                    reader.readAsText(file)
                }
            }
        }

        return false
    }
    drop_div.ondragover := { |ev|
        return false
    }

    window.addEventListener("wheel", { |ev|
        console.info(ev.deltaY)
    })

    window.addEventListener("keydown", { |ev|
        
        if ev.keyCode == 72 {
            menu := !menu
        }
        if menu {
            if ev.keyCode == 76 {
                reset_world()
                menu := false
            }
            if ev.keyCode == 78 {
                save_map_to_disk()
                menu := false
            }
            if ev.keyCode == 69 {
                empty_world()
                menu := false
            }
            if ev.keyCode == 82 {
                save_binary_map_to_disk()
                menu := false
            }
        } else {
            if ev.keyCode == 69 {
                # down
                cursor[1] += 1
            } else if ev.keyCode == 85 {
                cursor[1] -= 1
            }

            if ev.keyCode == 65 {
                cursor[0] -= 1
            } else if ev.keyCode == 79 {
                cursor[0] += 1
            }
            if ev.keyCode == 88 {
                cursor_dir := !cursor_dir
            }
            if ev.keyCode == 32 {
                let cur_cell = state.get_wall(world.first_state.map, cursor, cursor_dir)
                let draw_cell = if cur_cell == editor_selected_cell {
                    state.CELL_FLOOR
                } else {
                    editor_selected_cell
                }

                state.set_wall(
                    world.first_state.map,
                    cursor,
                    cursor_dir,
                    draw_cell)
            }
            if ev.keyCode >= 48 && ev.keyCode <= 58 {
                let num = ev.keyCode - 48
                if num == 1 {
                    editor_selected_cell := state.CELL_FLOOR
                } else if num == 2 {
                    editor_selected_cell := state.CELL_BLOCK
                } else if num == 3 {
                    if state.is_teleport(editor_selected_cell) {
                        if state.is_teleport(editor_selected_cell + 1) {
                            editor_selected_cell += 1
                        } else {
                            editor_selected_cell := state.CELL_TELEPORT0
                        }
                    } else {
                        editor_selected_cell := last_selected_teleport
                    }
                    last_selected_teleport := editor_selected_cell
                } else if num == 4 {
                    if state.is_switch(editor_selected_cell) {
                        if state.is_switch(editor_selected_cell + 1) {
                            editor_selected_cell += 1
                        } else {
                            editor_selected_cell := state.CELL_SWITCH0
                        }
                    } else {
                        editor_selected_cell := last_selected_switch
                    }
                    last_selected_switch := editor_selected_cell
                } else if num == 5 {
                    if state.is_door(editor_selected_cell) {
                        if state.is_door(editor_selected_cell + 1) {
                            editor_selected_cell += 1
                        } else {
                            editor_selected_cell := state.CELL_DOOR0
                        }
                    } else {
                        editor_selected_cell := last_selected_door
                    }
                    last_selected_door := editor_selected_cell
                } else if num == 6 {
                    editor_selected_cell := state.CELL_WINDOW
                }
            }
            if ev.keyCode == 9 {
                paused := !paused
                ev.preventDefault()
            }
        }
        
        #if ev.keyCode == 
        @debug console.log("key", ev.keyCode)
        return true
    })

    draw := { |whiteTex, fontBits, imgShader|
        # Map view/editor
        gl.disable(render.GL_DEPTH_TEST)
        render.color(0xffffffff)
        render.setView2([1, 0], [1, 0])
        render.activateShader(imgShader)

        let scale_down = 100

        let drawWall = { |x, y, dir, width|
            let down = if !dir { 1 } else { -width }
            let up = if !dir { 0 } else { width }
            let right = if dir { 1 } else { width }
            let left = if dir { 0 } else { -width }

            render.wall3d(whiteTex,
                scale_down, 10 + x + left,
                scale_down, 10 + x + right,
                -y - up,
                -y - down, 0, 0, 1, 1);
        }

        let drawWallText = { |x, y, dir, text, mirror|
            let down = if !dir { 1 } else { 0 }
            let up = if !dir { 0 } else { 0 }
            let right = if dir { 1 } else { 0 }
            let left = if dir { 0 } else { 0 }

            let textScale = 0.4/3
            
            let stridex = if mirror { -1 } else { 1 }
            let midx = 10 + x + (left + right) / 2
            let midy = -y - (up + down) / 2 - textScale*5/2

            if mirror {
                midx += textScale*3/2
            } else {
                midx -= textScale*3/2
            }

            render.drawText(fontBits, whiteTex, text, midx, midy, 100, stridex, 0, 1, 0.4/3)
        }

        # Editor bg
        render.color(0x7f000000)
        render.wall3d(whiteTex,
            scale_down, 10 + 0,
            scale_down, 10 + 0 + state.W,
            -0,
            -0 - state.H, 0, 0, 1, 1);

        render.color(0xff00ff00)
        drawWall(cursor[0], cursor[1], cursor_dir, 0.1)
        let now = state.current_player_time(world)

        for my in 0..32 {
            for mx in 0..32 {
                let step = 1
                
                let st = world.first_state
                let down = state.get_wall(st.map, [mx, my], false)
                let right = state.get_wall(st.map, [mx, my], true)

                let width = 0.05
                #[=
                render.wall3d(whiteTex,
                    step * 80, 1000 + mx * step,
                    step * 80, 1000 + mx * step + step,
                    -3000 + my * step,
                    -3000 + my * step + step, 0, 0, 1, 1);
                =]

                let obs = state.get_observed_cell(world, now, mx, my)
                if obs {
                    if obs == 1 {
                        render.color(0x33ffffff)
                    } else if obs == 255 {
                        render.color(0x55ff00ff)
                    } else {
                        render.color(0x330000ff)
                    }
                    render.wall3d(whiteTex,
                        scale_down, 10 + mx + 0,
                        scale_down, 10 + mx + 1,
                        -my - 0,
                        -my - 1, 0, 0, 1, 1);
                }
                
                [[down, false], [right, true]].forEach({|[cell, dir]|
                    if cell == state.CELL_BLOCK {
                        render.color(0xffffffff)
                        drawWall(mx, my, dir, width)
                    } else if state.is_teleport(cell) {
                        let teleport_id = (cell - state.CELL_TELEPORT0) >> 1
                        render.color(0xffffaaaa)
                        drawWallText(mx, my, dir, ""+teleport_id, cell & 1)
                    } else if state.is_switch(cell) {
                        let switch_id = cell - state.CELL_SWITCH0
                        render.color(0xffffffaa)
                        drawWallText(mx, my, dir, ""+switch_id, false)
                    } else if state.is_door(cell) {
                        let door_id = cell - state.CELL_DOOR0
                        render.color(0xffffaaff)
                        drawWallText(mx, my, dir, ""+door_id, false)
                    }
                })
            }
        }

        render.color(0xff0000ff)

        let player_pos = world.current_player_state.pos
        let player_width = 0.1

        render.wall3d(whiteTex,
            scale_down, 10 + player_pos[0] - player_width,
            scale_down, 10 + player_pos[0] + player_width,
            -player_pos[1] - player_width,
            -player_pos[1] + player_width, 0, 0, 1, 1);

        Object.keys(world.frames[now].player_states).forEach({|k|
            if k != world.current_player {
                let st = world.frames[now].player_states[k]
                render.color(0xffaaaaff)
                let other_player_pos = st.pos
                render.wall3d(whiteTex,
                    scale_down, 10 + other_player_pos[0] - player_width,
                    scale_down, 10 + other_player_pos[0] + player_width,
                    -other_player_pos[1] - player_width,
                    -other_player_pos[1] + player_width, 0, 0, 1, 1);
            }
        })

        render.color(0xff000000)

        render.drawText(fontBits, whiteTex, get_cell_name(editor_selected_cell), 10, 0, 100, 1, 0, 1, 1/3)
        render.drawText(fontBits, whiteTex, cursor[0] + " " + cursor[1], 20, 0, 100, 1, 0, 1, 1/3)

        if menu {
            render.drawText(fontBits, whiteTex, "N  SAVE", 10, 5, 100, 1, 0, 1, 1/3)
            render.drawText(fontBits, whiteTex, "L  RESET", 10, 7, 100, 1, 0, 1, 1/3)
            render.drawText(fontBits, whiteTex, "E  EMPTY MAP", 10, 9, 100, 1, 0, 1, 1/3)
        }
        render.flush()
        gl.enable(render.GL_DEPTH_TEST)
    }
}