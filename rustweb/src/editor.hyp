use state
use render

pub var draw
pub var paused

fn get_wall_name(wall) {
    if wall == state.WALL_FLOOR {
        return "FLOOR"
    } elseif state.is_block(wall) {
        let id = (wall - state.WALL_BLOCK0)
        return "BLOCK " + id
    } elseif state.is_teleport(wall) {
        let id = (wall - state.WALL_TELEPORT0)
        return "TELEPORT " + (id >> 1) + if id & 1 { " REV" } else { "" }
    } elseif state.is_switch(wall) {
        let id = (wall - state.WALL_SWITCH0)
        return "SWITCH " + id
    } elseif state.is_door(wall) {
        let id = (wall - state.WALL_DOOR0)
        return "DOOR " + id
    } elseif wall == state.WALL_WINDOW {
        return "WINDOW"
    }
    return "" + wall
}

fn get_cell_name(cell) {
    if cell == state.CELL_FLOOR {
        return "FLOOR"
    } elseif state.is_key(cell) {
        let id = (cell - state.CELL_KEY0)
        return "KEY " + id
    } elseif cell == state.CELL_EXIT {
        return "EXIT"
    } elseif cell == state.CELL_CLOAK {
        return "CLOAK"
    }
    return "" + cell
}

pub fn start(world) {
    let cursor = [0, 0]
    var cursor_dir = true, cursor_type = 1, menu = false
    paused := false

    var editor_selected_wall = state.WALL_BLOCK0,
        last_selected_teleport = state.WALL_TELEPORT0,
        last_selected_switch = state.WALL_SWITCH0,
        last_selected_door = state.WALL_DOOR0,
        last_selected_block = state.WALL_BLOCK0

    var editor_selected_cell = state.CELL_FLOOR,
        last_selected_key = state.CELL_KEY0

    fn to_json(st) {
        return JSON.stringify(new {
            version: 2,
            map: [].slice.call(world.first_state.map),
            options: world.first_state.options,
        })
    }

    fn to_binary(st) {
        var arr = new Uint8Array(world.first_state.map);
        # TODO: Add options
        return arr
    }

    fn from_json(json, st) {
        let map = JSON.parse(json)
        if map && map.map && map.options {
            # TODO: Upgrade map to latest version
            var options = map.options
            if map.version < 2 {
                let ADDED_6_BLOCKS = 6, VERSION1_BLOCK_MAX = 4

                for (0..state.MAP_SIZE) \i {
                    if map.map[i] >= VERSION1_BLOCK_MAX {
                        map.map[i] += ADDED_6_BLOCKS
                    }
                }

                options := new {}
                Object.keys(map.options).forEach\k{
                    var new_k = +k
                    if k >= VERSION1_BLOCK_MAX {
                        new_k += ADDED_6_BLOCKS
                    }
                    options[new_k] := map.options[k]
                }
            }
            #st.map := new Uint8Array(map.map)
            st.map := new Uint8Array(map.map)
            st.options := options

            console.log(options)
            console.log(map.map)
        } else {
            console.log("saved not found or corrupted", map)
        }
    }
    
    fn load_map() {
        let data = window.localStorage.getItem("hyp__map")
        if data {
            from_json(data, world.first_state)
        }
    }

    load_map()
    state.world_reset(world)

    fn save_map() {
        let data = to_json(world.first_state)
        window.localStorage.setItem("hyp__map", data)
        @debug console.log("saved", data)
    }

    var last_filename = "map.txt"

    fn save_blob_to_disk(blob, filename) {
        var a = document.createElement("a")
        a.download := filename
        a.rel := "noopener"
        a.href := URL.createObjectURL(blob)
        setTimeout({ URL.revokeObjectURL(a.href) }, 40000)
        setTimeout({
            a.dispatchEvent(new MouseEvent("click"))
            @debug console.log("clicked")
        }, 0)
    }

    fn save_map_to_disk() {
        let data = to_json(world.first_state)

        save_blob_to_disk(new File([data], last_filename), last_filename)
    }

    fn save_binary_map_to_disk() {
        let data = to_binary(world.first_state)

        console.log(data)
        save_blob_to_disk(new File([data], last_filename), last_filename)
    }

    fn reset_world() {
        save_map()
        state.world_reset(world)
        paused := false
    }

    fn empty_world() {
        world.first_state := state.state_create()
        state.world_reset(world)
        #paused := true
    }

    fn load_map_from_disk(text) {
        if text.includes("songData") {
            # Must be music, not a map

            # To parse, we do this shitty thing:
            var song = (new Function(text + "; return song"))()
            

        } else {
            from_json(text, world.first_state)
            reset_world()
        }
    }
    
    let drop_div = document.getElementById("d")
    drop_div.ondrop := \ev {
        @debug console.log("drop", ev)

        if ev.dataTransfer.items {
            # Use DataTransferItemList interface to access the file(s)
            #console.log("DataTransferItemList")
            for (0..(ev.dataTransfer.items.length)) \i {
                # If dropped items aren't files, reject them
                if ev.dataTransfer.items[i].kind === "file" {
                    let file = ev.dataTransfer.items[i].getAsFile()
                    last_filename := file.name
                    #console.log("... file[" + i + "].name = " + file.name)
                    let reader = new FileReader()
                    reader.onload := \rev {
                        load_map_from_disk(rev.target.result)
                    }
                    reader.readAsText(file)
                }
            }
        }

        return false
    }
    drop_div.ondragover := \ev {
        return false
    }

    window.addEventListener("wheel", \ev {
        console.info(ev.deltaY)
    })

    window.addEventListener("keydown", \ev {
        
        if ev.keyCode == 72 {
            menu := !menu
        }
        if menu {
            if ev.keyCode == 76 {
                reset_world()
                menu := false
            }
            if ev.keyCode == 78 {
                save_map_to_disk()
                menu := false
            }
            if ev.keyCode == 69 {
                empty_world()
                menu := false
            }
            if ev.keyCode == 82 {
                save_binary_map_to_disk()
                menu := false
            }
        } else {
            if ev.keyCode == 69 {
                # down
                cursor[1] += 1
            } elseif ev.keyCode == 85 {
                cursor[1] -= 1
            }

            if ev.keyCode == 65 {
                cursor[0] -= 1
            } elseif ev.keyCode == 79 {
                cursor[0] += 1
            }
            if ev.keyCode == 88 {
                cursor_dir := !cursor_dir
            }
            if ev.keyCode == 90 {
                cursor_type := 1 - cursor_type
            }
            if ev.keyCode == 32 {
                if cursor_type == 0 {
                    let cur_wall = state.get_wall(world.first_state.map, cursor, cursor_dir)
                    let draw_wall = if cur_wall == editor_selected_wall {
                        state.WALL_FLOOR
                    } else {
                        editor_selected_wall
                    }

                    state.set_wall(
                        world.first_state.map,
                        cursor,
                        cursor_dir,
                        draw_wall)
                } else {
                    let cur_cell = state.get_cell(world.first_state.map, cursor)
                    let draw_cell = if cur_cell == editor_selected_cell {
                        state.CELL_FLOOR
                    } else {
                        editor_selected_cell
                    }

                    state.set_cell(
                        world.first_state.map,
                        cursor,
                        draw_cell)
                }
            }
            if ev.keyCode >= 48 && ev.keyCode <= 58 {
                let num = ev.keyCode - 48
                if cursor_type == 0 {
                    if num == 1 {
                        editor_selected_wall := state.WALL_FLOOR
                    } elseif num == 2 {
                        if state.is_block(editor_selected_wall) {
                            if state.is_block(editor_selected_wall + 1) {
                                editor_selected_wall += 1
                            } else {
                                editor_selected_wall := state.WALL_BLOCK0
                            }
                        } else {
                            editor_selected_wall := last_selected_block
                        }
                        last_selected_block := editor_selected_wall
                    } elseif num == 3 {
                        if state.is_teleport(editor_selected_wall) {
                            if state.is_teleport(editor_selected_wall + 1) {
                                editor_selected_wall += 1
                            } else {
                                editor_selected_wall := state.WALL_TELEPORT0
                            }
                        } else {
                            editor_selected_wall := last_selected_teleport
                        }
                        last_selected_teleport := editor_selected_wall
                    } elseif num == 4 {
                        if state.is_switch(editor_selected_wall) {
                            if state.is_switch(editor_selected_wall + 1) {
                                editor_selected_wall += 1
                            } else {
                                editor_selected_wall := state.WALL_SWITCH0
                            }
                        } else {
                            editor_selected_wall := last_selected_switch
                        }
                        last_selected_switch := editor_selected_wall
                    } elseif num == 5 {
                        if state.is_door(editor_selected_wall) {
                            if state.is_door(editor_selected_wall + 1) {
                                editor_selected_wall += 1
                            } else {
                                editor_selected_wall := state.WALL_DOOR0
                            }
                        } else {
                            editor_selected_wall := last_selected_door
                        }
                        last_selected_door := editor_selected_wall
                    } elseif num == 6 {
                        editor_selected_wall := state.WALL_WINDOW
                    }
                } else {
                    if num == 1 {
                        editor_selected_cell := state.CELL_FLOOR
                    } elseif num == 2 {
                        if state.is_block(editor_selected_cell) {
                            if state.is_block(editor_selected_cell + 1) {
                                editor_selected_cell += 1
                            } else {
                                editor_selected_cell := state.CELL_KEY0
                            }
                        } else {
                            editor_selected_cell := last_selected_key
                        }
                        last_selected_key := editor_selected_cell
                    } elseif num == 3 {
                        editor_selected_cell := state.CELL_EXIT
                    } elseif num == 4 {
                        editor_selected_cell := state.CELL_CLOAK
                    }
                }
            }
            if ev.keyCode == 9 {
                paused := !paused
                ev.preventDefault()
            }
        }
        
        #if ev.keyCode == 
        @debug console.log("key", ev.keyCode)
        return true
    })

    draw := \whiteTex, fontBits, imgShader {
        # Map view/editor
        gl.disable(render.GL_DEPTH_TEST)
        render.color(0xffffffff)
        render.setView2([1, 0], [1, 0])
        render.activateShader(imgShader)

        let scale_down = 100

        let drawWall = \x, y, dir, width {
            let down = if !dir { 1 } else { -width }
            let up = if !dir { 0 } else { width }
            let right = if dir { 1 } else { width }
            let left = if dir { 0 } else { -width }

            render.wall3d(whiteTex,
                scale_down, 10 + x + left,
                scale_down, 10 + x + right,
                -y - up,
                -y - down, 0, 0, 1, 1);
        }

        let drawCell = \x, y {
            render.wall3d(whiteTex,
                scale_down, 10 + x + 0,
                scale_down, 10 + x + 1,
                -y - 0,
                -y - 1, 0, 0, 1, 1);
        }

        let drawWallText = \x, y, dir, text, mirror {
            let down = if !dir { 1 } else { 0 }
            let up = if !dir { 0 } else { 0 }
            let right = if dir { 1 } else { 0 }
            let left = if dir { 0 } else { 0 }

            let textScale = 0.4/3
            
            let stridex = if mirror { -1 } else { 1 }
            let midx = 10 + x + (left + right) / 2
            let midy = -y - (up + down) / 2 - textScale*5/2

            if mirror {
                midx += textScale*3/2
            } else {
                midx -= textScale*3/2
            }

            render.drawText(fontBits, whiteTex, text, midx, midy, 100, stridex, 0, 1, 0.4/3)
        }

        let drawCellText = \x, y, text, mirror {
            let textScale = 0.4/3
            
            let stridex = if mirror { -1 } else { 1 }
            var midx = 10 + x + 1 / 2
            var midy = -y - 1 / 2 - textScale*5/2

            if mirror {
                midx += textScale*3/2
            } else {
                midx -= textScale*3/2
            }

            render.drawText(fontBits, whiteTex, text, midx, midy, 100, stridex, 0, 1, 0.4/3)
        }

        # Editor bg
        render.color(0x7f000000)
        render.wall3d(whiteTex,
            scale_down, 10 + 0,
            scale_down, 10 + 0 + state.W,
            -0,
            -0 - state.H, 0, 0, 1, 1);

        # Cursor
        if cursor_type == 0 {
            render.color(0xff00ff00)
            drawWall(cursor[0], cursor[1], cursor_dir, 0.1)
        } else {
            render.color(0xaa00ff00)
            drawCell(cursor[0], cursor[1])
        }

        let now = state.current_player_time(world)

        for (0..32) \my {
            for (0..32) \mx {
                let step = 1
                
                let st = world.first_state
                let down = state.get_wall(st.map, [mx, my], false)
                let right = state.get_wall(st.map, [mx, my], true)

                # TEMP
                if state.get_observed_wall(world, state.current_player_time(world), mx, my, false) != 0 {
                    down := state.get_observed_wall(world, state.current_player_time(world), mx, my, false)
                }
                if state.get_observed_wall(world, state.current_player_time(world), mx, my, true) != 0 {
                    right := state.get_observed_wall(world, state.current_player_time(world), mx, my, true)
                }

                let cell = state.get_cell(st.map, [mx, my])
                let width = 0.05
                #[=
                render.wall3d(whiteTex,
                    step * 80, 1000 + mx * step,
                    step * 80, 1000 + mx * step + step,
                    -3000 + my * step,
                    -3000 + my * step + step, 0, 0, 1, 1);
                =]

                let obs = state.get_observed_cell(world, now, mx, my)
                if obs {
                    if obs == 1 {
                        render.color(0x33ffffff)
                    } elseif obs == 255 {
                        render.color(0x55ff00ff)
                    } else {
                        render.color(0x330000ff)
                    }
                    render.wall3d(whiteTex,
                        scale_down, 10 + mx + 0,
                        scale_down, 10 + mx + 1,
                        -my - 0,
                        -my - 1, 0, 0, 1, 1);
                }

                if state.is_key(cell) {
                    let id = cell - state.CELL_KEY0
                    render.color(0x3fffffff)
                    drawCell(mx, my)
                    render.color(0xff00ffff)
                    drawCellText(mx, my, ""+id, false)
                } elseif cell == state.CELL_EXIT {
                    render.color(0x3fffffff)
                    drawCell(mx, my)
                    render.color(0xffffff00)
                    drawCellText(mx, my, "E", false)
                } elseif cell == state.CELL_CLOAK {
                    render.color(0x3fffffff)
                    drawCell(mx, my)
                    render.color(0xffaaaaaa)
                    drawCellText(mx, my, "C", false)
                }

                [[down, false], [right, true]].forEach \[wall, dir]{
                    if state.is_block(wall) {
                        
                        if wall > state.WALL_BLOCK0 {
                            render.color(0xffaaaaaa)
                            drawWall(mx, my, dir, width)
                            render.color(0xffffffff)
                            drawWallText(mx, my, dir, ""+(wall - state.WALL_BLOCK0), false)
                        } else {
                            render.color(0xffffffff)
                            drawWall(mx, my, dir, width)
                        }
                    } elseif state.is_teleport(wall) {
                        let teleport_id = (wall - state.WALL_TELEPORT0) >> 1
                        render.color(0xffffaaaa)
                        drawWallText(mx, my, dir, ""+teleport_id, wall & 1)
                    } elseif state.is_switch(wall) {
                        let switch_id = wall - state.WALL_SWITCH0
                        render.color(0xffffffaa)
                        drawWallText(mx, my, dir, ""+switch_id, false)
                    } elseif state.is_door(wall) {
                        let door_id = wall - state.WALL_DOOR0
                        render.color(0xffffaaff)
                        drawWallText(mx, my, dir, ""+door_id, false)
                    }
                }
            }
        }

        render.color(0xff0000ff)

        let player_pos = world.current_player_state.pos
        let player_width = 0.1

        render.wall3d(whiteTex,
            scale_down, 10 + player_pos[0] - player_width,
            scale_down, 10 + player_pos[0] + player_width,
            -player_pos[1] - player_width,
            -player_pos[1] + player_width, 0, 0, 1, 1);

        Object.keys(world.frames[now].player_states).forEach\k {
            if +k != world.current_player {
                let st = world.frames[now].player_states[k]
                render.color(0xffaaaaff)
                let other_player_pos = st.pos
                render.wall3d(whiteTex,
                    scale_down, 10 + other_player_pos[0] - player_width,
                    scale_down, 10 + other_player_pos[0] + player_width,
                    -other_player_pos[1] - player_width,
                    -other_player_pos[1] + player_width, 0, 0, 1, 1);
            }
        }

        render.color(0xffffffff)

        if cursor_type == 0 {
            render.drawText(fontBits, whiteTex, get_wall_name(editor_selected_wall), 10, 0, 100, 1, 0, 1, 1/3)
        } else {
            render.drawText(fontBits, whiteTex, get_cell_name(editor_selected_cell), 10, 0, 100, 1, 0, 1, 1/3)
        }
        render.drawText(fontBits, whiteTex, cursor[0] + " " + cursor[1], 30, 0, 100, 1, 0, 1, 1/3)

        if menu {
            render.drawText(fontBits, whiteTex, "N  SAVE", 10, 5, 100, 1, 0, 1, 1/3)
            render.drawText(fontBits, whiteTex, "L  RESET", 10, 7, 100, 1, 0, 1, 1/3)
            render.drawText(fontBits, whiteTex, "E  EMPTY MAP", 10, 9, 100, 1, 0, 1, 1/3)
        }
        render.flush()
        gl.enable(render.GL_DEPTH_TEST)
    }
}