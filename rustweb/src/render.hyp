use vecmath
use "glsl/vertex" as vertex_glsl
#use "glsl/main" as main_glsl

pub let gl, canvas_w, canvas_h, viewTrans, viewTrans2, time = 0

pub let GL_VERTEX_SHADER = 0x8B31,
    GL_FRAGMENT_SHADER = 0x8B30,
    GL_ELEMENT_ARRAY_BUFFER = 0x8893,
    GL_ARRAY_BUFFER = 0x8892,
    GL_TEXTURE0 = 0x84C0

pub let GL_ONE = 1,
    GL_ZERO = 0,
    GL_SRC_ALPHA =           0x0302,
    GL_ONE_MINUS_SRC_ALPHA = 0x0303,
    GL_DST_ALPHA =           0x0304,
    GL_ONE_MINUS_DST_ALPHA = 0x0305,
    GL_DST_COLOR =           0x0306,
    GL_ONE_MINUS_DST_COLOR = 0x0307,
    GL_BLEND = 0x0BE2,
    GL_RGBA = 0x1908,
    GL_LUMINANCE = 0x1909

pub let GL_TRIANGLES = 0x0004,
    GL_TRIANGLE_STRIP = 0x0005,
    GL_UNSIGNED_BYTE = 0x1401,
    GL_UNSIGNED_SHORT = 0x1403,
    GL_FLOAT = 0x1406,
    GL_STATIC_DRAW = 0x88E4,
    GL_DYNAMIC_DRAW = 0x88E8,
    GL_COMPILE_STATUS = 0x8B81,
    GL_LINK_STATUS = 0x8B82,
    GL_TEXTURE_2D = 0x0DE1,
    GL_TEXTURE_WRAP_S = 0x2802,
    GL_TEXTURE_WRAP_T = 0x2803,
    GL_TEXTURE_MAG_FILTER = 0x2800,
    GL_TEXTURE_MIN_FILTER = 0x2801,
    GL_NEAREST = 0x2600,
    GL_LINEAR = 0x2601,
    GL_CLAMP_TO_EDGE = 0x812F,
    GL_COLOR_BUFFER_BIT = 0x00004000,
    GL_DEPTH_TEST = 0x0B71,
    GL_FRAMEBUFFER = 0x8D40,
    GL_COLOR_ATTACHMENT0 = 0x8CE0

pub let basicVs = vertex_glsl.main

#let wasm_memory = wasm.memory.buffer
#let wasm_U8 = Uint8Array.new(wasm_memory)
#let wasm_U32 = Uint32Array.new(wasm_memory)
let VERTEX_SIZE = (4 * 3) + (4 * 2) + (4 * 4)
let MAX_BATCH = 10922
#let MAX_STACK = 100
#let MAT_SIZE = 6
let VERTICES_PER_QUAD = 6
let QUAD_SIZE_IN_WORDS = (VERTEX_SIZE * VERTICES_PER_QUAD) / 4
let VERTEX_DATA_SIZE = VERTEX_SIZE * (MAX_BATCH * 6 + 32) # Some margin

let VBO
#let count = 0
let currentTexture
#let vertexData = ArrayBuffer.new(VERTEX_DATA_SIZE)
#let vPositionData = Float32Array.new(vertexData)
#let vColorData = Uint32Array.new(vertexData)
let vertexData = [];
let locPos = 0, locUV = 1, locColor = 2
let col = 0xffffffff

fn initGl(canvas) {
    gl := canvas.getContext("webgl")
    canvas_w := canvas.width
    canvas_h := canvas.height
    #gl.clearColor(0.3, 0.35, 0.5, 1.0)
    gl.clearColor(0, 0, 0, 1.0)
}

pub fn createBuffer(bufferType, size, usage) {
    let buffer = gl.createBuffer()
    gl.bindBuffer(bufferType, buffer)
    gl.bufferData(bufferType, size, usage)
    return buffer
}

pub fn createTexture(image, side, ty) {
    let texture = gl.createTexture()
    gl.bindTexture(GL_TEXTURE_2D, texture)
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
    gl.texImage2D(GL_TEXTURE_2D, 0, ty, side, side, 0, ty, GL_UNSIGNED_BYTE, new Uint8Array(image.buffer))
    @debug console.log("texImage")
    return texture
}

pub fn createFramebufferTexture(w, h) {
    let texture = gl.createTexture()
    gl.bindTexture(GL_TEXTURE_2D, texture)
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)
    gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
    let ty = GL_RGBA
    gl.texImage2D(GL_TEXTURE_2D, 0, ty, w, h, 0, ty, GL_UNSIGNED_BYTE, null)
    checkErr()
    @debug console.log(texture)

    let fb = gl.createFramebuffer()
    gl.bindFramebuffer(GL_FRAMEBUFFER, fb)
    checkErr()
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texture, 0)
    checkErr()
    @debug console.log(fb)
    fb.texture := texture
    return fb
}

pub fn deleteFramebufferTexture(fb) {
    gl.deleteTexture(fb.texture)
    gl.deleteFramebuffer(fb)
}

pub fn bindFramebufferTexture(fb) {
    gl.bindFramebuffer(GL_FRAMEBUFFER, fb)
}

pub fn unbindFramebufferTexture() {
    gl.bindFramebuffer(GL_FRAMEBUFFER, null)
}

pub fn setViewTransform(shader) {
    #gl.uniformMatrix3fv(gl.getUniformLocation(shader, "m"), 0, viewTrans)
    gl.uniform1f(gl.getUniformLocation(shader, vertex_glsl.ar), canvas_w / canvas_h)
    gl.uniformMatrix3fv(gl.getUniformLocation(shader, vertex_glsl.viewMat),
        0,
        viewTrans)

    gl.uniformMatrix3fv(gl.getUniformLocation(shader, vertex_glsl.viewMat2),
        0,
        viewTrans2)
}

pub fn color(c) {
    col := c
}

pub fn setView2([aimx, aimy], [aimvx, aimvy]) {


    # TODO: Transform Y and Z with aimv
    #[=
        [1, 0] should be identity
        
        [
            1,   0,   0,
            0,   aimvx, aimvy
            0,   -aimvy,  aimvx
        ]
    =]
    viewTrans := [
        -aimy, 0, -aimx,
        0,     1,     0,
        aimx,  0, -aimy ]

    viewTrans2 := [
        1,   0,   0,
        0,   aimvx, aimvy
        0,   -aimvy,  aimvx
    ]

}

pub fn setView(x, y, rotx, roty, zoom) {
    let ratio = canvas_h / canvas_w

    viewTrans := [
        1, 0, 0,
        0, 1, 0,
        0, 0, 1
    ]

    vecmath.scale(viewTrans, 2 / (1024 * zoom), 2 / (1024 * zoom * ratio))
    vecmath.rotvec(viewTrans, rotx, roty)
    vecmath.trans(viewTrans, -x, -y)
}

pub fn flush() {
    if vertexData.length {
        gl.vertexAttribPointer(locPos, 3, GL_FLOAT, 0, VERTEX_SIZE, 0)
        gl.vertexAttribPointer(locUV, 2, GL_FLOAT, 0, VERTEX_SIZE, 12)
        gl.vertexAttribPointer(locColor, 4, GL_FLOAT, 0, VERTEX_SIZE, 20)
        gl.bufferSubData(GL_ARRAY_BUFFER, 0, new Float32Array(vertexData))
        #console.log(vertexData.length, vertexData.length / (VERTEX_SIZE / 4))
        #@debug console.log(vertexData)
        gl.drawArrays(GL_TRIANGLES, 0, vertexData.length / (VERTEX_SIZE / 4))
        vertexData.length := 0
    }
    currentTexture := null
}

# floor, edge_direction
pub fn prism(texture, fx, fy, fz, ex, ey, ez) {
    let e1x = fx + ex, e1y = fy + ey
    let e2x = fx - ey, e2y = fy + ex
    let e3x = fx - ex, e3y = fy - ey
    let e4x = fx + ey, e4y = fy - ex
    let mz = fz + ez
    let cz = fz + ez + ez

    let abgr = col

    if texture != currentTexture {
        flush()
        currentTexture := texture
        gl.bindTexture(GL_TEXTURE_2D, currentTexture)
    }

    var a = (abgr >>> 24) / 255
    var b = ((abgr >> 16) & 0xff) / 255
    var g = ((abgr >> 8) & 0xff) / 255
    var r = (abgr & 0xff) / 255

    if (vertexData.push(
        fx, fz, fy, 0,0,r,g,b,a,
        e1x,mz, e1y,0,0,r,g,b,a,
        e2x,mz, e2y,0,0,r,g,b,a,

        fx, fz, fy, 0,0,r,g,b,a,
        e2x,mz, e2y,0,0,r,g,b,a,
        e3x,mz, e3y,0,0,r,g,b,a,

        fx, fz, fy, 0,0,r,g,b,a,
        e3x,mz, e3y,0,0,r,g,b,a,
        e4x,mz, e4y,0,0,r,g,b,a,

        fx, fz, fy, 0,0,r,g,b,a,
        e4x,mz, e4y,0,0,r,g,b,a,
        e1x,mz, e1y,0,0,r,g,b,a,

        fx, cz, fy, 0,0,r,g,b,a,
        e1x,mz, e1y,0,0,r,g,b,a,
        e2x,mz, e2y,0,0,r,g,b,a,

        fx, cz, fy, 0,0,r,g,b,a,
        e2x,mz, e2y,0,0,r,g,b,a,
        e3x,mz, e3y,0,0,r,g,b,a,

        fx, cz, fy, 0,0,r,g,b,a,
        e3x,mz, e3y,0,0,r,g,b,a,
        e4x,mz, e4y,0,0,r,g,b,a,

        fx, cz, fy, 0,0,r,g,b,a,
        e4x,mz, e4y,0,0,r,g,b,a,
        e1x,mz, e1y,0,0,r,g,b,a) >= MAX_BATCH * QUAD_SIZE_IN_WORDS) {

        flush();
    }
}

pub fn wall3d(texture, fx0, fz0, fx1, fz1, fy, cy, u0, v0, u1, v1) {
    let x0 = fx0,     y0 = fy,     z0 = fz0
    let x1 = fx1,     y1 = fy,     z1 = fz1
    let x2 = fx1,     y2 = cy,     z2 = fz1
    let x3 = fx0,     y3 = cy,     z3 = fz0
    let abgr = col

    if texture != currentTexture {
        flush()
        currentTexture := texture
        gl.bindTexture(GL_TEXTURE_2D, currentTexture)
    }

    var a = (abgr >>> 24) / 255;
    var b = ((abgr >> 16) & 0xff) / 255;
    var g = ((abgr >> 8) & 0xff) / 255;
    var r = (abgr & 0xff) / 255;

    if (vertexData.push(
        x0,y0,z0,u0,v1,r,g,b,a,
        x1,y1,z1,u1,v1,r,g,b,a,
        x3,y3,z3,u0,v0,r,g,b,a,
        x1,y1,z1,u1,v1,r,g,b,a,
        x2,y2,z2,u1,v0,r,g,b,a,
        x3,y3,z3,u0,v0,r,g,b,a) >= MAX_BATCH * QUAD_SIZE_IN_WORDS) {

        flush();
    }
}

pub fn activateShader(shader) {
    gl.useProgram(shader)
    setViewTransform(shader)
}

pub fn compileShader(source, ty) {
    let shader = gl.createShader(ty)
    gl.shaderSource(shader, "#extension GL_OES_standard_derivatives:enable\nprecision lowp float;" + source)
    gl.compileShader(shader)

    if !gl.getShaderParameter(shader, GL_COMPILE_STATUS) {
        #console.log(`Error compiling ${ty === GL_VERTEX_SHADER ? "vertex" : "fragment"} shader:`)
        console.log(gl.getShaderInfoLog(shader))
    }
    return shader
}

pub fn bindAttribLocations(shader) {
    [vertex_glsl.pos, vertex_glsl.texcoord, vertex_glsl.color].
        map\name, i { gl.bindAttribLocation(shader, i, name) }
}

pub fn createShaderProgram(vsSource, fsSource) {
    let program = gl.createProgram()
    let vShader = compileShader(vsSource, GL_VERTEX_SHADER)
    let fShader = compileShader(fsSource, GL_FRAGMENT_SHADER)
    gl.attachShader(program, vShader)
    gl.attachShader(program, fShader)
    gl.linkProgram(program)

    if !gl.getProgramParameter(program, GL_LINK_STATUS) {
        console.log("Error linking shader program:")
        console.log(gl.getProgramInfoLog(program))
    }

    bindAttribLocations(program)
    return program
}

pub fn checkErr(v) {
    let err = gl.getError()
    if err != 0 {
        console.log("error:", err)
        console.trace()
    }
    return v
}

pub fn init(canvas) {
    initGl(canvas)
    #gl.blendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    gl.blendFuncSeparate(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
    gl.enable(GL_BLEND)
    gl.enable(GL_DEPTH_TEST)

    gl.getExtension("OES_standard_derivatives")
    
    VBO := createBuffer(GL_ARRAY_BUFFER, VERTEX_DATA_SIZE, GL_DYNAMIC_DRAW)
    
    gl.enableVertexAttribArray(locPos)
    gl.enableVertexAttribArray(locUV)
    gl.enableVertexAttribArray(locColor)
    
    gl.activeTexture(GL_TEXTURE0)
}

pub fn drawText(fontBits, whiteTex, text, x, y, z, dirx, dirz, diry, scale) {
    for (0..(text.length)) \i {
        let ch = text.charCodeAt(i);

        var id = 200;
        if ch >= 48 && ch <= 57 {
            id := ch - 48
        } elseif ch >= 65 && ch <= 90 {
            id := ch - 65 + 10
        }

        var step = scale;
        for (0..3) \column {
            for (0..5) \row {
                let pos = (4 - row) * 36 * 3 + id * 3 + column
                if (fontBits[pos >> 3] >> (pos & 7)) & 1 {

                    let abs_column = i * 4 + column

                    wall3d(whiteTex,
                            z + dirz*step*abs_column, x + dirx*step*abs_column,
                            z + dirz*step*(abs_column + 1), x + dirx*step*(abs_column + 1),
                            y + diry*(row + 1)*step,
                            y + diry*row*step,
                            0, 0, 1, 1);
                }
            }
        }
        
        #x += 12 * scale

        #[=
        } else {
            x += 5;
        }=]
        
    }
}
