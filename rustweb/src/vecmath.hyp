pub fn trans(mat, x, y) {
    mat[6] += mat[0] * x + mat[3] * y
    mat[7] += mat[1] * x + mat[4] * y
}

pub fn scale(mat, x, y) {
    mat[0] *= x
    mat[1] *= x
    mat[3] *= y
    mat[4] *= y
}

pub fn rotvec(mat, x, y) {
    let a = mat[0]
    let b = mat[1]
    let c = mat[3]
    let d = mat[4]

    mat[0] := a * x + c * -y
    mat[1] := b * x + d * -y
    mat[3] := a * y + c * x
    mat[4] := b * y + d * x
}

pub fn vsub2([x0,y0],[x1,y1]) {
    return [x0-x1,y0-y1]
}

pub fn vadd2([x0,y0],[x1,y1]) {
    return [x0+x1,y0+y1]
}

pub fn vmul2([x0,y0], s) {
    return [x0*s,y0*s]
}

pub fn vrotate([x0,y0], [x1,y1]) {
    return [
        x0*x1 - y0*y1,
        x0*y1 + y0*x1]
}

pub fn vnormalize2([x,y]) {
    let l = Math.hypot(x, y)    
    return [x/l, y/l]
}